write.csv(NAWQA_invert_density, "../generated_data/finsync_nawqa_invert_density.csv")
## Brief visualization
colnames(NAWQA_invert_density)
sub <- NAWQA_invert_density[,c("Agency":"Ephemeroptera")]
sub <- subset(NAWQA_invert_density, select = "Agency":"Ephemeroptera")
sub <- subset(NAWQA_invert_density, select = Agency:Ephemeroptera)
View(sub)
sub$Eph_Dipt <- sub$Ephemeroptera/sub$Diptera
ggplot(sub, aes(Eph_Dipt))+geom_histogram()
ggplot(sub, aes(Eph_Dipt))+geom_histogram()+scale_x_continuous(trans = "log")
view_genera("Microcoleus","red")
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse","readxl",
"readr","sf","tigris","StreamCatTools","parallel"), require, character.only=T)
# read and clean data
nawqa <-
readxl::read_xlsx("../naqwa_data/ALGAE-PUBLIC-ALL-2022-01-04-0821-BioData/20220104.0821.SiteInfo.xlsx") %>%
dplyr::filter(!State %in% c('Alaska', 'Hawaii')) %>%
dplyr::select(SiteNumber, SiteName,
Latitude_dd, Longitude_dd,
DrainageArea_mi2) %>%
sf::st_as_sf(coords = c('Longitude_dd', 'Latitude_dd'), crs = 4269) %>%
sf::st_transform(crs = 5070)
#read in state boundaries
states <- tigris::states(cb = TRUE, progress_bar = FALSE)  %>%
filter(!STUSPS %in% c('HI', 'PR', 'AK', 'MP', 'GU', 'AS', 'VI'))  %>%
st_transform(crs = 5070)
# plot nawqa sites over states
ggplot() +
geom_sf(data = states, fill = NA) +
geom_sf(data = nawqa,
size = 1.5,
alpha = 0.5) +
theme_bw()
################################
## plot data by major genera
################################
# Import results with ATX producing genera
ATXcyanos <- read.csv("../generated_data/Sites_with_ATXcyanos.csv", header=T)
# Split ATX cyanos by genera
ATXcyanos_list <- split(ATXcyanos, ATXcyanos$Genus)
# Function to view different genera
view_genera <- function(genus, color_choice){
ggplot() +
geom_sf(data = states, fill = NA) +
geom_sf(data = nawqa, size = 1.5, alpha = 0.5, color = "grey")+
geom_sf(data = nawqa[which(nawqa$SiteName %in% unique(ATXcyanos_list[[genus]]$SiteName)),],
size = 1.75, alpha = 0.25, color = color_choice) +
theme_bw()
}
view_genera("Microcoleus","red")
view_genera("Lyngbya","brown")
view_genera("Microcoleus","red")
view_genera("Phormidium","purple")
View(ATXcyanos)
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse","readxl",
"finsyncR"), require, character.only=T)
################################################################
## Import cyano sites & re-import invert data
################################################################
ATXcyanos <- read.csv("../generated_data/Sites_with_ATXcyanos.csv", header=T)
NAWQA_invert_density <- read.csv("../generated_data/finsync_nawqa_invert_density.csv")
View(ATXcyanos)
colnames(ATXcyanos)
View(NAWQA_invert_density)
## resubset inverts
invert_sub <- subset(NAWQA_invert_density, select = Agency:Ephemeroptera)
invert_sub$Eph_Dipt <- invert_sub$Ephemeroptera/invert_sub$Diptera
View(ATXcyanos)
## Join
ATX_invert <- left_join(invert_sub[,c("StudyReachName","CollectionDate","Eph_Dipt")],
ATXcyanos[,c("StudyReachName","CollectionDate","Genus")], by= "")
## Join
ATX_invert <- left_join(invert_sub[,c("StudyReachName","CollectionDate","Eph_Dipt")],
ATXcyanos[,c("StudyReachName","CollectionDate","Genus")],
by= c("StudyReachName","CollectionDate"))
## Extract Microcoleus
ATXcyanos_list <- split(ATXcyanos, ATXcyanos$Genus)
## Modify Microcoleus to be presence/absence
MIC_pa <- ATXcyanos_list$Microcoleus
View(MIC_pa)
MIC_pa
## Modify Microcoleus to be presence/absence
MIC_pa <-
unique(ATXcyanos_list$Microcoleus)
## Modify Microcoleus to be presence/absence
unique(ATXcyanos_list$Microcoleus)
## Modify Microcoleus to be presence/absence
unique(ATXcyanos_list$Microcoleus$StudyReachName)
## Modify Microcoleus to be presence/absence
MIL_sites <- unique(ATXcyanos_list$Microcoleus$StudyReachName)
## Join
Invert_EphDipt <- invert_sub[,c("StudyReachName","CollectionDate","Eph_Dipt")]
Invert_EphDipt %>%
group_by(StudyReachName) %>%
summarise_at(.vars = Eph_Dipt, .funs = mean(.))
Invert_EphDipt %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean(.))
Invert_EphDipt %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean)
## Join
invert_sub %>%
select(StudyReachName, Eph_Dipt)
## Join
mean_Eph_Dipt <- invert_sub %>%
select(StudyReachName, Eph_Dipt)
## Join
mean_Eph_Dipt <- invert_sub %>%
select(StudyReachName, Eph_Dipt) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean)
View(mean_Eph_Dipt)
mean_Eph_Dipt$MIL_PA <- NULL
View(mean_Eph_Dipt)
View(mean_Eph_Dipt)
mean_Eph_Dipt$MIL_PA <- NA
mean_Eph_Dipt[which(mean_Eph_Dipt$StudyReachName %in% MIL_sites),]
mean_Eph_Dipt$MIL_PA <- ifelse(mean_Eph_Dipt$StudyReachName %in% MIL_sites,
yes = "P",
no = "A")
View(mean_Eph_Dipt)
ggplot(mean_Eph_Dipt, aes(Eph_Dipt), fill = MIL_PA)+
geom_histogram()+
scale_x_continuous(trans = "log")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")+
scale_y_continuous(trans = "log")
## Modify Microcoleus to be presence/absence
MIL_sites <- unique(ATXcyanos_list$Anabaena$StudyReachName)
## Join
mean_Eph_Dipt <- invert_sub %>%
select(StudyReachName, Eph_Dipt) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean)
mean_Eph_Dipt$MIL_PA <- ifelse(mean_Eph_Dipt$StudyReachName %in% MIL_sites,
yes = "P",
no = "A")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")+
scale_y_continuous(trans = "log")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")
## Modify Microcoleus to be presence/absence
MIL_sites <- unique(ATXcyanos_list$Phormidium$StudyReachName)
## Join
mean_Eph_Dipt <- invert_sub %>%
select(StudyReachName, Eph_Dipt) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean)
mean_Eph_Dipt$MIL_PA <- ifelse(mean_Eph_Dipt$StudyReachName %in% MIL_sites,
yes = "P",
no = "A")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")
## Modify Microcoleus to be presence/absence
MIL_sites <- unique(ATXcyanos_list$Microcoleus$StudyReachName)
## Join
mean_Eph_Dipt <- invert_sub %>%
select(StudyReachName, Eph_Dipt) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Eph_Dipt", .funs = mean)
mean_Eph_Dipt$MIL_PA <- ifelse(mean_Eph_Dipt$StudyReachName %in% MIL_sites,
yes = "P",
no = "A")
ggplot(mean_Eph_Dipt, aes(Eph_Dipt, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")
NAWQA_invert_density_family <- getInvertData(dataType = "density",
taxonLevel = "Family",
taxonFix = "lump",
agency = c("USGS"),
lifestage = FALSE,
rarefy = FALSE,
sharedTaxa = FALSE,
seed = 0,
boatableStreams = FALSE)
write.csv(NAWQA_invert_density_family, "../generated_data/finsync_nawqa_invert_density_family.csv")
View(NAWQA_invert_density_family)
################################################################
## Import cyano sites & re-import invert data - FAMILY
################################################################
ATXcyanos <- read.csv("../generated_data/Sites_with_ATXcyanos.csv", header=T)
## resubset inverts
invert_sub <- subset(NAWQA_invert_density_family, select = Agency:Ephemeroptera)
colnames(NAWQA_invert_density_family)
## resubset inverts
invert_sub <- subset(NAWQA_invert_density_family, select = Agency:Heptageniidae)
invert_sub$Chiro_Hept <- invert_sub$Chironomidae/invert_sub$Heptageniidae
## Split cyanos by genera
ATXcyanos_list <- split(ATXcyanos, ATXcyanos$Genus)
## Modify Microcoleus to be presence/absence
MIL_sites <- unique(ATXcyanos_list$Microcoleus$StudyReachName)
## Join
mean_Ratio <- invert_sub %>%
select(StudyReachName, Chiro_Hept) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Ratio", .funs = mean)
## Join
mean_Ratio <- invert_sub %>%
select(StudyReachName, Chiro_Hept) %>%
group_by(StudyReachName) %>%
summarise_at(.vars = "Chiro_Hept", .funs = mean)
mean_Ratio$MIL_PA <- ifelse(mean_Ratio$StudyReachName %in% MIL_sites,
yes = "P",
no = "A")
ggplot(mean_Ratio, aes(Chiro_Hept, fill = MIL_PA))+
geom_histogram()+
scale_x_continuous(trans = "log")
setwd("C:/Users/jblaszczak/Dropbox/UNR/Publications/0_2024 Jasmine N uptake")
#######################
## Import packages
#######################
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse"), require, character.only=T)
list.files()
df <- read.csv("Dec2024_ModelEval.csv", header = T)
View(df)
sat <- df[which(df$Saturated. == "yes"),]
View(sat)
View(df)
## Site
SH <- df[which(df$Site == "SH3m"),]
View(SH)
setwd("~/GitHub/Nitrogen-uptake-incubations-Lake-Tahoe/code")
# Import model fits
fit_MM <- read.csv("../data/model_outputs_MM_filtered.csv", header = T)
fit_lin <- read.csv("../data/model_outputs_linear_filtered.csv", header = T)
View(fit_MM)
View(fit_MM)
View(fit_lin)
head(fit_MM)
View(fit_MM)
fit_MM$model_fit <- "MM"
fit_lin$model_fit <- "linear"
# Load packages
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse", "reshape2"),require, character.only=T)
fits <- left_join(fit_MM, fit_lin, by = "model_name")
View(fits)
# Merge
colnames(fit_MM); colnames(fit_lin)
fits <- left_join(fit_MM, fit_lin, by = "model_name")
##########################################
## Exclude subset based on visual evals
##########################################
inc_to_exclude <- c("BW0.5m_June_sediment_NO3",
"BW0.5m_May_sediment_NO3",
"BW3m_June_sediment_NO3",
"GB0.5m_July_sediment_NO3",
"GB0.5m_June_sediment_NO3",
"GB0.5m_May_biofilm_NH3",
"GB0.5m_May_biofilm_NO3",
"GB0.5m_May_sediment_NH3",
"GB0.5m_May_sediment_NO3",
"SS3m_May_sediment_NO3")
## Compare model fits per site based on output from JAK (need that other code)
## JRB
# Load packages
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse", "reshape2"),require, character.only=T)
# Import model fits
fit_MM <- read.csv("../data/model_outputs_MM_filtered.csv", header = T) #59
fit_lin <- read.csv("../data/model_outputs_linear_filtered.csv", header = T) #60
# Merge
colnames(fit_MM); colnames(fit_lin)
fits <- left_join(fit_MM, fit_lin, by = "model_name")
View(fits)
##########################################
## Exclude subset based on visual evals
##########################################
inc_to_exclude <- c("BW0.5m_June_sediment_NO3",
"BW0.5m_May_sediment_NO3",
"BW3m_June_sediment_NO3",
"GB0.5m_July_sediment_NO3",
"GB0.5m_June_sediment_NO3",
"GB0.5m_May_biofilm_NH3",
"GB0.5m_May_biofilm_NO3",
"GB0.5m_May_sediment_NH3",
"GB0.5m_May_sediment_NO3",
"SS3m_May_sediment_NO3")
fits <- fits[!which(fits$model_name %in% inc_to_exclude),]
fits <- left_join(fit_MM, fit_lin, by = "model_name")
fits <- fits[-which(fits$model_name %in% inc_to_exclude),]
View(fits)
head(fits)
## Split model name
fits <- fits %>%
separate(model_name,
into = c("Site", "Month", "Substrate", "N_Type"),
sep = "_",
remove = FALSE)
View(fits)
## Summarize total acceptable incubations
fits_total_incub <- fits %>%
group_by(Site, Month, Substrate, Type) %>%
count()
## Summarize total acceptable incubations
fits_total_incub <- fits %>%
group_by(Site, Month, Substrate, N_Type) %>%
count()
View(fits_total_incub)
## Summarize total acceptable incubations
fits_total_incub <- fits %>%
group_by(Site, Month, N_Type) %>%
count()
## Summarize total acceptable incubations
fits_total_incub <- fits %>%
group_by(Site, N_Type) %>%
count()
## Summarize total acceptable incubations
fits_total_incub <- fits %>%
group_by(Site, Substrate, N_Type) %>%
count()
## Rename Site column
levels(as.factor(fits$Site))
"SS3m" = "SS_NS")
fits$SiteID <- revalue(fits$Site, replace = c("BW0.5m" = "BW_INT",
"BW10m" = "BW_SL",
"BW3m" = "BW_NS",
"GB0.5m" = "GB_INT",
"GB10m" = "GB_SL",
"GB3m" = "GB_NS",
"SH3m" = "SH_NS",
"SS3m" = "SS_NS"))
## Split model name
fits <- fits %>%
separate(SiteID,
into = c("Stream", "Location"),
sep = "_",
remove = FALSE)
## Compare model fits per site based on output from JAK (need that other code)
## JRB
# Load packages
lapply(c("plyr","dplyr","ggplot2","cowplot",
"lubridate","tidyverse", "reshape2"),require, character.only=T)
# Import model fits
fit_MM <- read.csv("../data/model_outputs_MM_filtered.csv", header = T) #59
fit_lin <- read.csv("../data/model_outputs_linear_filtered.csv", header = T) #60
# Merge
colnames(fit_MM); colnames(fit_lin)
fits <- left_join(fit_MM, fit_lin, by = "model_name")
##########################################
## Prep Data
##########################################
# Remove messy incubations based on visual assessments on Nov. 19th
inc_to_exclude <- c("BW0.5m_June_sediment_NO3",
"BW0.5m_May_sediment_NO3",
"BW3m_June_sediment_NO3",
"GB0.5m_July_sediment_NO3",
"GB0.5m_June_sediment_NO3",
"GB0.5m_May_biofilm_NH3",
"GB0.5m_May_biofilm_NO3",
"GB0.5m_May_sediment_NH3",
"GB0.5m_May_sediment_NO3",
"SS3m_May_sediment_NO3")
fits <- fits[-which(fits$model_name %in% inc_to_exclude),]
## Split model name
fits <- fits %>%
separate(model_name,
into = c("Site", "Month", "Substrate", "N_Type"),
sep = "_",
remove = FALSE)
## Rename Site column
levels(as.factor(fits$Site))
fits$SiteID <- revalue(fits$Site, replace = c("BW0.5m" = "BW_INT",
"BW10m" = "BW_SL",
"BW3m" = "BW_NS",
"GB0.5m" = "GB_INT",
"GB10m" = "GB_SL",
"GB3m" = "GB_NS",
"SH3m" = "SH_NS",
"SS3m" = "SS_NS"))
## Split SiteID
fits <- fits %>%
separate(SiteID,
into = c("Stream", "Location"),
sep = "_",
remove = FALSE)
## Summarize total acceptable incubations by different groupings
fits_total_incub <- fits %>%
group_by(Stream, Location, Substrate, N_Type) %>%
count()
## Split SiteID
fits <- fits %>%
separate(SiteID,
into = c("Stream", "Depth_Loc"),
sep = "_",
remove = FALSE)
## Summarize total acceptable incubations by different groupings
fits_total_incub <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
count()
write.csv("../data/final_incub_by_SiteLocSubstrateNType")
write.csv(fits_total_incub, "../data/final_incub_by_SiteLocSubstrateNType.csv")
## What proportion of incubations had MM models that fit Vmax and Km?
# add category for Vmax and Km p values
colnames(fits)
fits$Vmax_sig_0.05 <- ifelse(fits$p_value_Vmax < 0.05, yes = "yes", no = "no")
fits$Km_sig_0.05 <- ifelse(fits$p_value_Km < 0.05, yes = "yes", no = "no")
View(fits_total_incub)
fits$Vmax_Km_sig_0.05 <- ifelse(fits$Vmax_sig_0.05 == "yes" & fits$Km_sig_0.05 == "yes", yes = "yes", no = "no")
??grepl
fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
fits_MM_sig <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
View(fits_MM_sig)
fits_MM_sig <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Total = count(),
Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
fits_MM_sig <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Total = sum(grepl(Vmax > 0, Vmax)),
Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
fits_MM_sig <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Total = n(),
Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
fits_MM_sig <- fits %>%
group_by(Stream, Depth_Loc, Substrate, N_Type) %>%
summarise(Total = n(),
Vmax_sig = sum(grepl("yes", Vmax_sig_0.05)),
Km_sig = sum(grepl("yes", Km_sig_0.05)),
Vmax_Km_sig = sum(grepl("yes", Vmax_Km_sig_0.05)),)
# calcuate the proportion of sites with saturating MM models
fits_MM_sig$Prop_MM_bothsig <- fits_MM_sig$Vmax_Km_sig/fits_MM_sig$Total
View(fits_MM_sig)
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = N_Type, group = Depth_Loc))+
geom_point()
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = N_Type, shape = Depth_Loc))+
geom_point()
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = N_Type, shape = Depth_Loc))+
geom_jitter()
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = N_Type, shape = Depth_Loc))+
geom_jitter(size = 4)+
theme_bw()
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = N_Type, shape = Depth_Loc))+
geom_jitter(size = 4, width = 0.2)+
theme_bw()
## Across all sites and dates, what proportion of incubations had sig MM?
fits_MM_sig %>%
group_by(Substrate, N_Type)%>%
summarise(Sum_Total = sum(Total),
Sum_Vmax_Km_sig = sum(Vmax_Km_sig))
## Across all sites and dates, what proportion of incubations had sig MM?
fits_MM_sig %>%
group_by(Substrate, N_Type)%>%
summarise(Sum_Total = sum(Total),
Sum_Vmax_Km_sig = sum(Vmax_Km_sig))%>%
mutate(Prop_Sig = Sum_Vmax_Km_sig/Sum_Total)
## Across all sites and dates, what proportion of incubations had sig MM?
fits_MM_sig %>%
group_by(Stream, Substrate, N_Type)%>%
summarise(Sum_Total = sum(Total),
Sum_Vmax_Km_sig = sum(Vmax_Km_sig))%>%
mutate(Prop_Sig = Sum_Vmax_Km_sig/Sum_Total)
## Across all sites and dates, what proportion of incubations had sig MM?
Prop_sigMM_summary <- fits_MM_sig %>%
group_by(Stream, Substrate, N_Type)%>%
summarise(Sum_Total = sum(Total),
Sum_Vmax_Km_sig = sum(Vmax_Km_sig))%>%
mutate(Prop_Sig = Sum_Vmax_Km_sig/Sum_Total)
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = Depth_Loc))+
geom_jitter(size = 4, width = 0.2)+
theme_bw()+
facet_grid(~N_Type)
ggplot(fits_MM_sig, aes(Stream, Prop_MM_bothsig, color = Depth_Loc, shape = Substrate))+
geom_jitter(size = 4, width = 0.2)+
theme_bw()+
facet_grid(~N_Type)
Prop_sigMM_summary
ggplot(Prop_sigMM_summary, aes(Stream, Prop_Sig))+
geom_bar()
ggplot(Prop_sigMM_summary, aes(Stream, Prop_Sig))+
geom_bar()+
theme_bw()+
facet_grid(~N_Type)
ggplot(Prop_sigMM_summary, aes(Stream, Prop_Sig))+
geom_bar(stat = "identity")+
theme_bw()+
facet_grid(~N_Type)
ggplot(Prop_sigMM_summary, aes(Stream, Prop_Sig, fill = Substrate))+
geom_bar(stat = "identity")+
theme_bw()+
facet_grid(~N_Type)
ggplot(Prop_sigMM_summary, aes(Stream, Prop_Sig, fill = Substrate))+
geom_bar(stat = "identity")+
theme_bw()+
facet_grid(~N_Type + Substrate)
